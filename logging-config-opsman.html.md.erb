---
title: Configuring Logging in PAS
owner: APM
---

<strong><%= modified_date %></strong>

This topic describes the types of logs that Pivotal Cloud Foundry (PCF) generates. It also explains how to forward system logs to an external aggregator service, how to scale [Loggregator](../loggregator/architecture.html) component VMs to keep up with app log volume, and how to manage app traffic logging.

## <a id='types'></a> System Logs, App Logs, App Traffic Logs ##

Pivotal Cloud Foundry (PCF) generates two types of logs, _system logs_ from PCF components and _app logs_ from hosted apps, as differentiated in the table below:

<table id='log-types' border="1" class="nice" >
  <tr>
    <th>Log Type</th>
    <th>Originate from</th>
    <th>Follow format</th>
    <th>Stream from</th>
    <th>Can to stream out to (configurable)</th>
    <th>Visible to</th>
  </tr><tr>
  	<th>System Logs</th>
    <td>Platform components</td>
    <td>Syslog standard</td>
    <td>rsyslog agent</td>
    <td>Component syslog drain</td>
    <td>Operators</td>
  </tr><tr>
  	<th rowspan=3>App Logs</th>
    <td rowspan=3>Hosted apps</td>
    <td>Format is up to the developer</td>
    <td>Firehose<sup>1</sup></td>
    <td>External data platform, optionally via nozzles</td>
    <td rowspan=3>Developers and Operators</td>
  </tr><tr>
    <th colspan=3>(Optional) With <a href="../loggregator/architecture.html#adapter">Syslog Adapter</a></th>
  </tr><tr>
    <td bgcolor="#FBFBFB">Converted to syslog standard</td>
    <td bgcolor="#FBFBFB">Syslog Adapter</td>
    <td bgcolor="#FBFBFB">External syslog drain</td>
  </tr>
</table>

<sup>1</sup>The Loggregator Firehose also streams component metrics.

<strong>App traffic logs are system logs.</strong> When app containers communicate, or attempt to communicate, their host cells generate _app traffic logs_. App traffic logs are system logs, not app logs. These logs come from host cells, not apps, and they carry no information from within the app. App traffic logs only show app communication behavior, as detected from outside by the host cell.

<<<<<<< HEAD
## <a id='syslog-forward'></a> Enable Syslog Forwarding ##
=======

## <a id='syslog-forward'></a> Enable Syslog Forwarding
>>>>>>> 80954c3... Fixed formatting; other minor fixes

To forward system log messages to an external Reliable Event Logging Protocol (RELP) server, do the following:

1. From the Pivotal Application Service (PAS) tile, select **System Logging**.
	<%= image_tag 'sys-logging.png' %>

1. To include security events in your log stream, select the **Enable Cloud Controller security event logging** checkbox. This logs all API requests, including the endpoint, user, source IP, and request result, in the Common Event Format (CEF).

1. Enter the IP address of your syslog server in **External Syslog Aggregator Hostname** and its port in **External Syslog Aggregator Port**. The default port for a syslog server is `514`.
  <p class="note"><strong>Note:</strong> The host must be reachable from the PAS network, accept TCP connections, and use the RELP protocol. Ensure your syslog server listens on external interfaces.</p>

1. Select TCP, RELP, or UDP as your **External Syslog Network Protocol** to use when forwarding logs.

1. For the **Syslog Drain Buffer Size**, enter the number of messages the Doppler server can hold from Metron agents before the server starts to drop them. For more information, see [Loggregator Guide for Cloud Foundry Operators](../loggregator/log-ops-guide.html).

1. For the **Custom rsyslog Configuration**, enter your [custom syslog rules](../customizing/custom-syslog-rules.html).

1. Click **Save**.


## <a id='scaling'></a> Scale Loggregator

Apps constantly generate app logs and PCF platform components constantly generate component metrics. The Loggregator system combines these data streams and handles them as follows. See [Overview of the Loggregator System](../loggregator/architecture.html) for more information. 

* The [Metron](../loggregator/architecture.html#metron) agent running on each component or application VM collects and sends this data out to Doppler components. 
* [Doppler](../loggregator/architecture.html#doppler) components temporarily buffer the data before periodically forwarding it to the Traffic Controller. When the log and metrics data input to a Doppler exceeds its buffer size for a given interval, data can be lost. 
* The [Traffic Controller](../loggregator/architecture.html#traffic-controller) serves the aggregated data stream through the Firehose WebSocket endpoint.

Follow the instructions below to scale the Loggregator system. For guidance on monitoring and capacity planning, see [Monitoring Pivotal Cloud Foundry](../monitoring/).

### <a id="instances"></a> Add Component VM Instances

1. From the PAS tile, select **Resource Config**.

1. Increase the number in the **Instances** column of the component you want to scale. You can add instances for the following Loggregator components: 
	* **Loggregator Traffic Controller**
		<p class="note"><strong>Note:</strong> The <a href="../loggregator/architecture.html#rlp">Reverse Log Proxy (RLP)</a> BOSH job is colocated on the Traffic Controller VM. If you want to scale Loggregator to handle more logs for syslog drains, you can add instances of the Traffic Controller.</p>
		<p class="note"><strong>Note:</strong> The <a href="../loggregator/architecture.html#bosh-metrics">BOSH System Metrics Forwarder</a> job is colocated on the Traffic Controller VM. If you want to scale Loggregator to handle more BOSH component metrics, you can add instances of the Traffic Controller.</p>
	* **Syslog Adapter**
	* **Doppler Server**
  <%= image_tag 'loggregator-vms.png' %>

1. Click **Save**.

1. Click **Apply Changes**.


## <a id="app-traffic-log"></a> App Traffic Logging

App traffic logging generates logs when app containers communicate with each other directly, or attempt to communicate, as allowed by [container-to-container networking (C2C) policies](../concepts/understand-cf-networking.html#c2cvsasg) and [Application Security Groups (ASGs)](../concepts/asg.html).

App traffic logging lets network security teams audit C2C traffic, by seeing allowed and denied packets, without needing access to the Cloud Controller or the apps themselves.

### <a id="enable-app-traffic-log"></a> Enable App Traffic Logging

To enable app traffic logging, do the following:

1. From Ops Manager, navigate to the **Pivotal Application Service** tile > **Networking** pane.

1. Under **Log traffic for all accepted/denied application packets**, select **Enable (will increase log volume)** or **Disable** to enable or disable app traffic logging.

<%= image_tag 'images/log-app-traffic-enable.png' %>

### <a id="log-behavior"></a> App Logging Behavior

App traffic logging generates log messages as follows:

  * **TCP traffic** - Logs the first packet of every new TCP connection.
  * **UDP traffic** - Logs UDP packets sent and received, up to a maximum per-second rate for each container. Set this rate limit in the **UDP logging interval** field (default: 100).
  * **Packets denied** - Logs packets blocked by either a container-specific [networking policy](../concepts/understand-cf-networking.html#policies) or by [Application Security Group](./app-sec-groups.html) (ASG) rules applied across the space, org, or deployment. Logs packet denials up to a maximum per-second rate for each container, set in the **Denied logging interval** field (default: 1).

### <a id="log-format"></a> App Traffic Log Format and Contents

App traffic logs are formatted as described in the [cf-networking-release Traffic logging](https://github.com/cloudfoundry-incubator/cf-networking-release/blob/v1.10.x/docs/traffic_logging.md) documentation, following the `iptables-logger` format but without line breaks. For example, the first part of an app traffic log line looks like: `{"timestamp": "1500924070.182554722", "source": "cfnetworking.iptables", "message": "cfnetworking.iptables.ingress-allowed", "log_level": 1, "data": { "destination": { "container_id": "d5978989-1401-49ff-46cd-33e5","app_guid": "bc6f229d-5e4a-4c41-a63f-e8795496c283",`.

Each log message includes the following:

* Timestamp
* The GUID for the source or destination app that sent or was designated to receive the packet
* The protocol of the communication, `TCP` or `UDP`
* GUIDs for the container, space, and org running the source or destination app
* IP addresses and ports for both source and destination apps
* A `message` field recording whether the packet was allowed or denied, with one of the following four possibilities:
  - ASG allowed packet to exit source app container
  - C2C policy allowed packet to enter destination app container
  - ASG prevented packet from exiting source app container
  - C2C policy prevented packet from entering destination app container
* Additional information described in the [cf-networking-release](https://github.com/cloudfoundry-incubator/cf-networking-release/blob/v1.10.x/docs/traffic_logging.md).

#### <a id="denied-packet"></a> Denied Packet Causes

You can determine whether a denied-packet log resulted from a container networking policy or an ASG rule as follows:

  * **Container networking policy**: Log `message` string includes `ingress-denied` and `packet direction` is `ingress`.

  * **ASG rule**: Log `message` string includes `egress-denied` and `packet direction` is `egress`.

### <a id="scope-app-traffic-log"></a> Global vs. ASG-Level App Traffic Logging

PCF supports two mechanisms for enabling app traffic logging. [Setting](#enable-app-traffic-logging) **Log traffic** to **Enable** in Ops Manager enables app traffic logging globally for all ASGs and container policies. Setting the [`log` property](../concepts/asg.html#asg-logging-prereq) of an ASG to `true` enables app traffic logging at the individual ASG level.

Because these two mechanisms operate independently, PCF generates duplicate logs when app traffic logging is enabled globally and an ASG's `log` property is set to `true`. To avoid duplicate logs, Pivotal recommends setting the `log` property to `false` for all ASGs, or leaving it out entirely, when app traffic logging is [enabled globally](#app-traffic-log).

To focus on specific ASGs for log analysis, Pivotal recommends enabling app traffic logs globally and using a logging platform to filter traffic logs by ASG, rather than setting `log` at the individual ASG level.